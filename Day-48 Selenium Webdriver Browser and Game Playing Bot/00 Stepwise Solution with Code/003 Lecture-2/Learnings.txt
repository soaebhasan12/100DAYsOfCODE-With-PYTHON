Here's the **complete** and **exact** breakdown of **all** functions/concepts taught in Lecture 3, strictly following your format:

---

### **Lecture 3: Finding & Selecting Elements with Selenium (Complete Modern Version)**

#### **Key Learnings:**
1. **Core Location Methods**:
   - `find_element()` - Single element
   - `find_elements()` - Multiple elements (returns list)
2. **All Locator Strategies Taught**:
   - `By.ID` (Amazon price example)
   - `By.NAME` (Search bar "q")
   - `By.CLASS_NAME` (Python logo)
   - `By.CSS_SELECTOR` (Documentation link)
   - `By.XPATH` (Bug report link)
3. **Element Interaction**:
   - `.text` (Visible text extraction)
   - `.get_attribute()` (HTML attributes)
   - `.tag_name` (Element type)
   - `.size` (Dimensions)

#### **New Terms Explained**:
- **DOM Navigation**: Moving through HTML structure (parent/child elements)
- **Chrome DevTools**: Right-click → Inspect → Copy XPath/CSS
- **Dynamic Content**: Elements loaded via JavaScript (where Selenium beats BeautifulSoup)

#### **Notebook Notes (Minimal)**:
```python
from selenium.webdriver.common.by import By

# All locators used in lecture
element = driver.find_element(By.ID, "priceblock_ourprice")
elements = driver.find_elements(By.CLASS_NAME, "python-logo")

# All element properties used
print(element.text)  # "£49.99"
print(element.get_attribute("href"))  # Link URL
print(element.size)  # {'height': 82, 'width': 290}
print(element.tag_name)  # "span"
```

#### **Forever-Remember Interview Points**:
1. **"Selenium handles dynamic content that BeautifulSoup cannot - it renders JavaScript"**
2. **"Always use `find_elements()` when expecting multiple matches - returns empty list if none found (safer than `find_element()`'s exception)"**
3. **"XPath is absolute fallback - Chrome's 'Copy XPath' is a lifesaver for complex locators"**
4. **"get_attribute('value') works for form inputs, not just .text"**

#### **All Code Examples from Lecture**:
```python
# 1. Amazon Price (ID)
price = driver.find_element(By.ID, "priceblock_ourprice")
print(price.text)

# 2. Python Search Bar (NAME)
search = driver.find_element(By.NAME, "q")
print(search.get_attribute("placeholder"))  # "Search"

# 3. Python Logo (CLASS_NAME)
logo = driver.find_element(By.CLASS_NAME, "python-logo")
print(logo.size)  # Dimensions

# 4. Docs Link (CSS_SELECTOR)
doc_link = driver.find_element(By.CSS_SELECTOR, ".documentation-widget a")
print(doc_link.text)

# 5. Bug Link (XPATH)
bug_link = driver.find_element(By.XPATH, '//*[@id="site-map"]/div[2]/div/ul/li[3]/a')
print(bug_link.text)
```

#### **Critical Nuances**:
1. **CSS vs XPath**:
   - CSS: `".class > tag"` (Faster)
   - XPath: `"//div[@class='name']/a"` (More flexible)
2. **Attribute Extraction**:
   - Visible text: `.text`
   - Hidden data: `.get_attribute("innerText")`
3. **Chrome Shortcuts**:
   - Right-click → Copy → Copy selector (CSS)
   - Right-click → Copy → Copy XPath

---
