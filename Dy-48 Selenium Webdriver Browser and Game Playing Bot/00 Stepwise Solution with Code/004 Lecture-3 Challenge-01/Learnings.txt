### **Lecture 4: Challenge - Scraping Event Data with Selenium**

#### **Key Learnings:**
1. **CSS Selector Strategy**:
   - `.event-widget time` - Targets time elements within event-widget class
   - `.event-widget li a` - Targets anchor tags within list items (excludes "more" link)
2. **Data Organization**:
   - Created dictionary with nested structure: `{0: {"time": date, "name": event}}`
3. **List Processing**:
   - Used `range(len())` to iterate matching pairs of dates/names
   - Combined `find_elements()` with list indexing

#### **New Terms Explained:**
- **Widget Scraping**: Extracting data from a specific UI component (event-widget)
- **CSS Combinator**: Space character to indicate parent-child relationship
- **Nested Dictionary**: Dictionary containing other dictionaries as values

#### **Notebook Notes (Minimal):**
```python
from selenium.webdriver.common.by import By

# Get all event times
event_times = driver.find_elements(By.CSS_SELECTOR, ".event-widget time")
# Get all event names (excluding "more" link)
event_names = driver.find_elements(By.CSS_SELECTOR, ".event-widget li a")

events = {}
for n in range(len(event_times)):
    events[n] = {
        "time": event_times[n].text,
        "name": event_names[n].text
    }
```

#### **Forever-Remember Interview Points:**
1. **"When scraping lists, always verify selectors return equal-length collections"**
2. **"CSS combinators (space, >, +) help target specific DOM hierarchies"**
3. **"Exclude unwanted elements by refining selector specificity (e.g., avoiding 'more' links)"**
4. **"Dictionary comprehensions can compact this data transformation (bonus optimization)"**

#### **Complete Solution Code:**
```python
from selenium.webdriver.common.by import By

# 1. Locate all event elements
times = driver.find_elements(By.CSS_SELECTOR, ".event-widget time")
names = driver.find_elements(By.CSS_SELECTOR, ".event-widget li a")

# 2. Structure the data
events = {
    index: {
        "time": times[index].text,
        "name": names[index].text
    }
    for index in range(len(times))
}

# 3. Print result
print(events)
```

#### **Critical CSS Selector Details:**
1. `.event-widget time` = Any `<time>` inside element with class `event-widget`
2. `.event-widget li a` = Only `<a>` tags inside `<li>` (excludes standalone links)
3. Avoided `.event-widget a` which would catch unwanted "more" link

---
